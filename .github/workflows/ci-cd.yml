name: CI/CD DevOps App

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/devops-app

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./app
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  deploy-app:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Deploy App to EC2
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            if [ ! -d "/home/ec2-user/devops_app/.git" ]; then
              git clone https://github.com/${{secrets.GIT_USER}}/${{secrets.GIT_REPO}}.git /home/ec2-user/devops_app
            else
              cd /home/ec2-user/devops_app
              git pull
            fi
            cd /home/ec2-user/devops_app
            docker compose down || true
            docker compose -f docker-compose.yaml up -d app

  deploy-monitoring:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Deploy Monitoring Stack to EC2
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            cd /home/ec2-user/devops_app/app
            git pull
            docker compose down || true
            docker compose -f docker-compose.yaml up -d prometheus grafana 